import crypto from 'node:crypto';

class SchemaAssignConfig {
	/**
	 * default: false
	 * @type {boolean}
	 */
	allowAdditionalKeys = false;

	/**
	 * default: false
	 * @type {boolean}
	 */
	allowUndefinedKeys = false;
}

export class SchemaConfig extends SchemaAssignConfig {
	/**
	 * default: UUID v4
	 * @type {(targer: Record<string, any>) => string | number}
	 */
	idStrategy = () => crypto.randomUUID();

	/**
	 * default: new Date().toISOString()
	 * @type {() => string}
	 */
	timestampStrategy = () => new Date().toISOString();
}

/**
 * ### Schema Utility
 */
export class Schema {
	static #globalConfig = new SchemaConfig();

	/**
	 * Goobal Configuration
	 * @param {Partial<SchemaConfig>} config
	 * @returns {void}
	 */
	static configure(config = {}) {
		Object.assign(this.#globalConfig, config);
	}

	/** @type {SchemaConfig} */
	#config = {};

	get config() {
		return this.#config;
	}

	constructor() {
		this.configure();
	}

	/**
	 * Instance Configuration
	 * @param {Partial<SchemaConfig>} config
	 */
	configure(config = {}) {
		Object.assign(this.#config, Schema.#globalConfig, config);
	}

	/**
	 * Object.assign with SchemaConfig
	 * @param {object} target
	 * @param {object} source
	 * @param {Partial<SchemaAssignConfig>?} temporaryConfig
	 */
	assign(target, source, temporaryConfig) {
		const {
			allowAdditionalKeys,
			allowUndefinedKeys,
		} = {...this.config, ...temporaryConfig};
		const definedKeys = Object.keys(target);

		if (!allowAdditionalKeys) {
			for (const key of Object.keys(source)) {
				if (!definedKeys.includes(key)) {
					throw new Error(`Property ${key} is not defined in ${target.constructor.name}`);
				}
			}
		}

		Object.assign(target, source);

		if (!allowUndefinedKeys) {
			for (const key of definedKeys) {
				if (target[key] === undefined) {
					target[key] = null;
				}
			}
		}
	}

	/**
	 * if primaryKey is not assigned, it will be generated by SchemaConfig.idStrategy.
	 * @param {object} target
	 * @param {string} primaryKey
	 * @param {(targer: Record<string, any>) => string | number} [temporaryIdStrategy]
	 */
	autoId(target, primaryKey, temporaryIdStrategy = undefined) {
		const idStrategy = temporaryIdStrategy || this.config.idStrategy;
		target[primaryKey] ||= idStrategy();
	}

	/**
	 * if timestampKey is not assigned, it will be generated by SchemaConfig.timestampStrategy.
	 * @param {object} target
	 * @param {string} timestampKey
	 * @param {() => string} [temporaryTimestampStrategy]
	 */
	autoTimestamp(target, timestampKey, temporaryTimestampStrategy = undefined) {
		const timestampStrategy = temporaryTimestampStrategy || this.config.timestampStrategy;
		target[timestampKey] ||= timestampStrategy();
	}
}
