export class SchemaConfig extends SchemaAssignConfig {
    /**
     * default: UUID v4
     * @type {(targer: Record<string, any>) => string | number}
     */
    idStrategy: (targer: Record<string, any>) => string | number;
    /**
     * default: new Date().toISOString()
     * @type {() => string}
     */
    timestampStrategy: () => string;
}
/**
 * ### Schema Utility
 */
export class Schema {
    static "__#3@#globalConfig": SchemaConfig;
    /**
     * Goobal Configuration
     * @param {Partial<SchemaConfig>} config
     * @returns {void}
     */
    static configure(config?: Partial<SchemaConfig>): void;
    get config(): SchemaConfig;
    /**
     * Instance Configuration
     * @param {Partial<SchemaConfig>} config
     */
    configure(config?: Partial<SchemaConfig>): void;
    /**
     * Object.assign with SchemaConfig
     * @param {object} target
     * @param {object} source
     * @param {Partial<SchemaAssignConfig>?} temporaryConfig
     */
    assign(target: object, source: object, temporaryConfig: Partial<SchemaAssignConfig> | null): void;
    /**
     * if primaryKey is not assigned, it will be generated by SchemaConfig.idStrategy.
     * @param {object} target
     * @param {string} primaryKey
     * @param {(targer: Record<string, any>) => string | number} [temporaryIdStrategy]
     */
    autoId(target: object, primaryKey: string, temporaryIdStrategy?: (targer: Record<string, any>) => string | number): void;
    /**
     * if timestampKey is not assigned, it will be generated by SchemaConfig.timestampStrategy.
     * @param {object} target
     * @param {string} timestampKey
     * @param {() => string} [temporaryTimestampStrategy]
     */
    autoTimestamp(target: object, timestampKey: string, temporaryTimestampStrategy?: () => string): void;
    #private;
}
export const schema: Schema;
declare class SchemaAssignConfig {
    /**
     * default: false
     * @type {boolean}
     */
    allowAdditionalKeys: boolean;
    /**
     * default: false
     * @type {boolean}
     */
    allowUndefinedKeys: boolean;
}
export {};
//# sourceMappingURL=index.d.ts.map